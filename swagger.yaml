swagger: '2.0'
info:
  version: 1.0.0
  title: Factory Management System API
  description: API for managing various aspects of factory operations.
host: api.factorymanagementsystem.com
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

paths:
  /employees:
    get:
      summary: List all employees
      responses:
        '200':
          description: A list of employees
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "name": "John Doe",
                  "department": "Production",
                  "position": "Engineer"
                },
                {
                  "id": 2,
                  "name": "Jane Smith",
                  "department": "Marketing",
                  "position": "Manager"
                }
              ]
    post:
      summary: Create a new employee
      parameters:
        - in: body
          name: employee
          description: Employee object to be created
          required: true
          schema:
            $ref: '#/definitions/Employee'
      responses:
        '201':
          description: Employee created successfully
          schema:
            $ref: '#/definitions/Employee'
          examples:
            application/json:
              {
                "id": 3,
                "name": "David Lee",
                "department": "Sales",
                "position": "Representative"
              }

  /products:
    get:
      summary: List all products
      responses:
        '200':
          description: A list of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "name": "Widget X",
                  "description": "High-quality widget for various applications",
                  "price": 19.99
                },
                {
                  "id": 2,
                  "name": "Gadget Y",
                  "description": "Innovative gadget for everyday use",
                  "price": 49.95
                }
              ]
    post:
      summary: Create a new product
      parameters:
        - in: body
          name: product
          description: Product object to be created
          required: true
          schema:
            $ref: '#/definitions/Product'
      responses:
        '201':
          description: Product created successfully
          schema:
            $ref: '#/definitions/Product'   

          examples:
            application/json:
              {
                "id": 3,
                "name": "Device Z",
                "description": "Cutting-edge device for professionals",
                "price": 199.99
              }

  /orders:
    get:
      summary: List all orders
      responses:
        '200':
          description: A list of orders
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'
          examples:
            application/json:
              [
                {
                  "id": 1,
                  "customerId": 123,
                  "orderDate": "2024-10-26",
                  "items": [
                    {
                      "productId": 1,
                      "quantity": 2
                    },
                    {
                      "productId": 2,
                      "quantity": 1
                    }
                  ]
                }
              ]
    post:
      summary: Create a new order
      parameters:
        - in: body
          name: order
          description: Order object to be created
          required: true
          schema:
            $ref: '#/definitions/Order'
      responses:
        '201':
          description: Order created successfully
          schema:
            $ref: '#/definitions/Order'
          examples:
            application/json:
              {
                "id": 2,
                "customerId": 456,
                "orderDate": "2024-10-27",
                "items": [
                  {
                    "productId": 2,
                    "quantity": 3
                  }
                ]
              }

  /customers:
    get:
      summary: List all customers
      responses:
        '200':
          description: A list of customers
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'
          examples:
            application/json:
              [
                {
                  "id": 123,
                  "name": "Jane Smith",
                  "address": "123 Main St, Anytown, CA 91234",
                  "phone": "555-123-4567",
                  "email": "jane.smith@example.com"
                }
              ]
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {
                "code": "INTERNAL_SERVER_ERROR",
                "message":   
 "An unexpected error occurred."
              }
    post:
      summary: Create a new customer
      parameters:
        - in: body
          name: customer
          description: Customer object to be created
          required: true
          schema:
            $ref: '#/definitions/Customer'
      responses:
        '201':
          description: Customer created successfully
          schema:
            $ref: '#/definitions/Customer'
          examples:
            application/json:
              {
                "id": 456,
                "name": "John Doe",
                "address": "456 Oak Ave, Anycity, NY 54321",
                "phone": "555-987-6543",
                "email": "john.doe@example.com"
              }
        '400':
          description: Invalid input
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {
                "code": "INVALID_INPUT",
                "message": "Invalid customer data provided. Please check your input."
              }
        '500':
          description: Internal server error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {
                "code": "INTERNAL_SERVER_ERROR",
                "message":   
 "An unexpected error occurred."
              }

  /customers/{id}:
    get:
      summary: Get a customer by ID
      parameters:
        - in: path
          name: id
          description: ID of the customer to retrieve
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: A customer object
          schema:
            $ref: '#/definitions/Customer'
          examples:
            application/json:
              {
                "id": 123,
                "name": "Jane Smith",
                "address": "123 Main St, Anytown, CA 91234",
                "phone": "555-123-4567",
                "email": "jane.smith@example.com"
              }
        '404':
          description: Customer not found
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json:
              {
                "code": "CUSTOMER_NOT_FOUND",
                "message": "Customer with the provided ID not found."